- name: Setup the instance on GCE
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Create storage disk
      gce_pd:
        disk_type: pd-ssd
        zone: "{{ zone }}"
        project_id: "{{ project_id }}"
        size_gb: "{{ size_gb }}"
        image: "{{ image_name }}"
        name: "{{ machine }}-ci-boot"
        state: present
        service_account_email: "{{ service_account_email }}"
        credentials_file: "{{ credentials_file }}"
    - name: Create the instance
      gce:
        disks:
          - name: "{{ machine }}-ci-boot"
            mode: READ_WRITE
        instance_names: "{{ machine }}-ci"
        machine_type: n1-standard-64
        service_account_email: "{{ service_account_email }}"
        credentials_file: "{{ credentials_file }}"
        project_id: "{{ project_id }}"
        zone: "{{ zone }}"
      register: gce
    - name: Wait for SSH to come up
      wait_for: host={{ gce.instance_data[0].public_ip }}
                port=22
                timeout=60
    - name: Add host to groupname
      add_host: hostname={{ gce.instance_data[0].public_ip }}
                groupname=instances
- name: Configure users and dependencies
  hosts: instances
  connection: ssh
  become: true
  tasks:
    - name: Set release type environment variable
      lineinfile:
        dest: /etc/environment
        state: present
        regexp: 'RELEASE="([a-z])\w+"'
        line: 'RELEASE="{{ release }}"'
    - name: Disable Python optimization because speed is not important.
      lineinfile: dest=/etc/environment
                  state=present
                  regexp="{{item}}"
                  line="{{item}}"
      with_items:
        - 'PYTHONUNBUFFERED=1'
        - 'PYTHONDONTWRITEBYTECODE=1'


- name: Prepare the daemon binary
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Build the daemon binary
      shell: ./pants binary ci/continuous_integration:daemon
      args:
        chdir: ../
        executable: /bin/bash
    # We expect GOMA_DIR or goma to be at the default location, ~/goma.
    - name: Update the local goma
      shell: python goma_ctl.py update
      args:
        chdir: "{{goma_dir}}"
        executable: /bin/bash


- name: Setup python-daemon (runit service, folder, log folder, and service)
  hosts: instances
  connection: ssh
  become: true
  vars:
    - files:
        - {'src': 'python_daemon/run', 'dest': '/etc/sv/python-daemon/run', 'recurse': 'no'}
        - {'src': 'python_daemon/log_run', 'dest': '/etc/sv/python-daemon/log/run', 'recurse': 'no'}
        - {'src': '../dist/daemon.pex', 'dest': '/python-daemon', 'recurse': 'no'}
        - {'src': '/auto/FuzzInfrastructure/clusterfuzz-tools/clusterfuzz-tools-ci-credentials.json', 'dest': '/python-daemon/service-account-credentials.json', 'recurse': 'no'}
        - {'src': "{{goma_dir}}", 'dest': '/home/clusterfuzz', 'recurse': 'yes'}
  tasks:
    - command: "sv stop python-daemon"
      ignore_errors: yes
    - file: path="{{item}}"
            state=directory
            owner=clusterfuzz
            group=clusterfuzz
            mode='u=rwx,g=rx,o=rx'
      with_items:
        - '/python-daemon'
        - '/python-daemon-data'
    - file: path="{{item}}"
            state=directory
            owner=root
            group=root
            mode='u=rwx,g=rwx,o=rwx'
      with_items:
        - '/etc/sv/python-daemon'
        - '/etc/sv/python-daemon/log'
        - '/var/log/python-daemon'
        - '/home/clusterfuzz/.clusterfuzz'
    - synchronize: src={{item.src}}
                   dest={{item.dest}}
                   mode=push
                   recursive=yes
      with_items: "{{files}}"
    - file: src={{item.src}}
            dest={{item.dest}}
            owner=clusterfuzz
            group=clusterfuzz
            mode='u=rwx,g=rwx,o=rwx'
            recurse={{item.recurse}}
      with_items: "{{files}}"
    - name: Suppress Goma from auto update
      copy:
        content: ""
        dest: "/home/clusterfuzz/goma/no_auto_update"
        force: no
        group: clusterfuzz
        owner: clusterfuzz
        mode: 0666
    - copy:
        src: '/google/data/ro/teams/clusterfuzz-tools/releases/clusterfuzz-rc'
        dest: '/python-daemon-data/clusterfuzz'
        force: true
        owner: root
        group: root
        mode:  'u=rwx,g=rwx,o=rwx'
      when: release == "release-candidate"
    - copy:
        src: '/google/data/ro/teams/clusterfuzz-tools/releases/clusterfuzz'
        dest: '/python-daemon-data/clusterfuzz'
        force: true
        owner: root
        group: root
        mode:  'u=rwx,g=rwx,o=rwx'
      when: release == "release"
    - file:
        src: '{{ item.src }}'
        dest: '{{ item.dest }}'
        state: link
        mode: 'u=rwx,g=rwx,o=rwx'
      with_items:
        - { src: '/etc/sv/python-daemon', dest: '/etc/service/python-daemon' }
    - pause:
        seconds: 3
        prompt: Waiting 3 second for the server to acknowledge the CI service
    - shell: "sv restart python-daemon"
